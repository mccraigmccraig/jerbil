= Jerbil -- Java build system based on Rake[http://rake.rubyforge.org] and Rjb

  "If I knew then what I know now, I would have tried using a real
  scripting language, such as JavaScript via the Rhino component or
  Python via JPython, with bindings to Java objects which implemented
  the functionality expressed in todays tasks. Then, there would be a
  first class way to express logic and we wouldn't be stuck with XML as
  a format that is too bulky for the way that people really want to use
  the tool."
  
    -- James Duncan Davidson, creator of Apache Ant
 
This package contains several TaskLibs for Rake[http://rake.rubyforge.org] which can be
used to build Java projects. 

Jerbil uses Rjb[http://rjb.rubyforge.org/]
(Ruby-Java-Bridge) to load a Java virtual machine into the Ruby process running Rake.

The JVM is then used to compile Java source files, create javadocs etc.
It is not a complete replacement for ant (yet), but has several advantages such as
extremly compact build files and easy scriptability.

The main focus at the moment are small to medium-sized projects using 
testng[http://testng.org] and hibernate[http://hibernate.org].

== Requirements

Jerbil requires rubygems[http://rubygems.org], Rake, Rjb, builder[http://builder.rubyforge.org/]
and JDK 1.5. 

== Installation

You need to have Ruby and rubygems installed. On Debian systems (testing) this is a simple as:
  
  % apt-get install rubygems
  
Rake, Rjb and builder are best installed using gem:

  % gem install rake
  % gem install rjb
  % gem install builder
  
The installation of Rjb requires that the JDK is installed and JAVA_HOME set up
accordingly. Finally jerbil needs to be installed:

  % gem install jerbil --source http://code.trampolinesystems.com

Jerbil might become an 'official' rubygem at some later point. Note that some tasks require additional
jar files, for example Jerbil::TestNG::TestNGTask.

The source code is available via subversion: http://svn.trampolinesystems.com/jerbil/trunk
  
== Usage

A minimal Rakefile to compile Java files looks like this:

	require 'jerbil'
	
	CLASSPATH = FileList[ "./lib/*.jar" ]
	BUILD_DIR = "build"
	FILES     = JavaFileList.new("src", BUILD_DIR)
	
	load_jvm(CLASSPATH, BUILD_DIR)
	
	Jerbil::JavacTask.new(:compile, FILES) 

The JVM gets loaded once via the +load_jvm+ method. This initialization step is
required, otherwise the task will fail. <tt>Jerbil::JavacTask.new(:compile, FILES)</tt>
defines a new task (<tt>:compile</tt>) which will compile all Java files found in directory
+src+ to +build+.

== Example

See the example/[http://svn.trampolinesystems.com/jerbil/trunk/example] subdirectory
in the repository.

  % svn co http://svn.trampolinesystems.com/jerbil/trunk/example

== Advantages over Ant

See Martin Fowler's article[http://www.martinfowler.com/articles/rake.html] for a detailed
discussion on Rake vs. Ant. Besides the more compact build scripts you also get ability to
implement arbitrary Java interfaces in Ruby (see Jerbil::TestNG::TestListener for an example).
Another possibility is build script metaprogramming, i.e. creating your tasks programmatically:

  MODULES = [ "common", "core", "server" ]
  MODULES.each_with_index do |m,i|
    Jerbil::JavacTask.new("compile_#{m}") do |jct|
      jct.java_files = JavaFileList.new(File.join(m,SOURCE_DIR), JAVA_BUILD_DIR)
      MODULES[0..i-1].each {|prev| jct.depends_on "compile_#{prev}" } if i>0
    end
  end

This snippet creates several build targets (:compile_common, :compile_core, :compile_server) 
including correct dependencies.

== Related projects

* Raven[http://raven.rubyforge.org/]: similar to Jerbil in scope, but different approach (invokes 
  javac directly, no Java-Ruby integration).
 
== FAQ

See JerbilFAQ[http://code.trampolinesystems.com/jerbil/wiki/JerbilFAQ].

== Contact

mailto:jan@trampolinesystems.com

== License

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
in compliance with the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License 
is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express 
or implied. See the License for the specific language governing permissions and limitations under 
the License. 
